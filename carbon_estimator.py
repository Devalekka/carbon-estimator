# -*- coding: utf-8 -*-
"""carbon estimator.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1tgTlhQ42D4Ji8tToKvL6WA7uviaAgjei
"""

from google.colab import drive
import pandas as pd
# Mount Google Drive
drive.mount('/content/drive')

# Load the dataset
file_path = '/content/drive/My Drive/Carbon Emission.csv'
df = pd.read_csv(file_path)

# Select only numerical columns
numeric_cols = df.select_dtypes(include=['number'])

# Fill missing values with median
df[numeric_cols.columns] = numeric_cols.fillna(numeric_cols.median())

# Fill categorical missing values with mode
categorical_cols = df.select_dtypes(exclude=['number'])
df[categorical_cols.columns] = categorical_cols.fillna(categorical_cols.mode().iloc[0])

print(df.isnull().sum())  # Verify no missing values remain

categorical_cols = df.select_dtypes(exclude=['number']).columns
print("Categorical Columns:", categorical_cols)

df_encoded = pd.get_dummies(df, columns=[
    'Body Type', 'Sex', 'Diet', 'How Often Shower', 'Heating Energy Source',
    'Transport', 'Vehicle Type', 'Social Activity',
    'Frequency of Traveling by Air', 'Waste Bag Size', 'Energy efficiency',
    'Recycling', 'Cooking_With'
], drop_first=True)

print(df_encoded.head())  # View the first few rows
print(df_encoded.info())  # Ensure categorical data is now numeric

import seaborn as sns
import matplotlib.pyplot as plt

# Compute correlation matrix
corr_matrix = df_encoded.corr()

# Sort features by correlation with CarbonEmission
corr_sorted = corr_matrix["CarbonEmission"].sort_values(ascending=False)

# Plot top correlated features
plt.figure(figsize=(10,6))
sns.barplot(x=corr_sorted.iloc[1:11], y=corr_sorted.index[1:11])
plt.title("Top 10 Features Correlated with Carbon Emission")
plt.xlabel("Correlation Coefficient")
plt.ylabel("Feature")
plt.show()

from sklearn.ensemble import RandomForestRegressor

# Define X (features) and y (target)
X = df_encoded.drop(columns=["CarbonEmission"])
y = df_encoded["CarbonEmission"]

# Train Random Forest model
rf_model = RandomForestRegressor()
rf_model.fit(X, y)

# Get feature importance scores
importance = rf_model.feature_importances_
feature_names = X.columns

# Visualize top 10 features
plt.figure(figsize=(10,6))
sns.barplot(x=importance[:10], y=feature_names[:10])
plt.title("Top 10 Important Features for Carbon Emission Prediction")
plt.show()

from sklearn.model_selection import train_test_split
from sklearn.ensemble import RandomForestRegressor
from sklearn.metrics import mean_absolute_error, r2_score

# Split data into training & testing sets (80/20 split)
X = df_encoded.drop(columns=["CarbonEmission"])
y = df_encoded["CarbonEmission"]

X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# Train Random Forest model
rf_model = RandomForestRegressor(n_estimators=100, random_state=42)
rf_model.fit(X_train, y_train)

# Predict & evaluate
y_pred = rf_model.predict(X_test)
accuracy = r2_score(y_test, y_pred)  # Check accuracy using R¬≤ score

print(f"Model Accuracy (R¬≤ Score): {accuracy:.2f}")
print(f"Mean Absolute Error: {mean_absolute_error(y_test, y_pred):.2f}")

import matplotlib.pyplot as plt

plt.figure(figsize=(8,6))
plt.scatter(y_test, y_pred, alpha=0.6)
plt.plot([min(y_test), max(y_test)], [min(y_test), max(y_test)], color='red', linestyle='dashed')  # Ideal prediction line
plt.xlabel("Actual Carbon Emission")
plt.ylabel("Predicted Carbon Emission")
plt.title("Actual vs. Predicted Carbon Emission")
plt.show()

import numpy as np

# Calculate residuals
residuals = y_test - y_pred

# Plot residuals
plt.figure(figsize=(8,6))
plt.hist(residuals, bins=30, edgecolor='black')
plt.xlabel("Prediction Error (Residuals)")
plt.ylabel("Frequency")
plt.title("Residual Error Distribution")
plt.show()

!pip install gradio

# Commented out IPython magic to ensure Python compatibility.
# %%writefile app.py
# import gradio as gr
# import matplotlib.pyplot as plt
# 
# GLOBAL_EMISSION_DAILY = 10.5  # kg CO‚ÇÇ/day
# 
# def predict_emission(body_type, sex, diet, transport, vehicle_type, air_travel,
#                      waste_bag_size, energy_efficiency, distance, recycling):
# 
#     transport_emission = {"private": 3.5, "public": 1.4, "walk/bicycle": 0.3}
#     diet_emission = {"omnivore": 1.7, "vegetarian": 1.0, "vegan": 0.7, "pescatarian": 1.2}
#     air_travel_emission = {"very frequently": 6.7, "rarely": 2.5, "never": 0}
# 
#     carbon_emission = (distance * 0.004)
#     carbon_emission += transport_emission.get(transport, 0)
#     carbon_emission += diet_emission.get(diet, 0)
#     carbon_emission += air_travel_emission.get(air_travel, 0)
#     if energy_efficiency == "No":
#         carbon_emission += 1.8
# 
#     impact = "Low üå±" if carbon_emission < 5 else "Medium üåø" if carbon_emission < 10 else "High üî•"
#     feedback = f"Estimated carbon emission: {carbon_emission:.2f} kg CO‚ÇÇ/day"
#     suggestions = "Opt for more sustainable transport and consider reducing meat consumption."
# 
#     fig1, ax1 = plt.subplots()
#     ax1.bar(["You", "Global Avg"], [carbon_emission, GLOBAL_EMISSION_DAILY], color=["#4169E1", "#87A9FA"])
#     ax1.set_title("Your Daily Emission vs Global Avg", color='black')
#     ax1.set_ylabel("kg CO‚ÇÇ/day", color='black')
#     ax1.tick_params(colors='black')
#     ax1.set_facecolor("#FFFFFF")
#     fig1.patch.set_facecolor("#FFFFFF")
# 
#     fig2, ax2 = plt.subplots()
#     sizes = [
#         carbon_emission * (0.4 if transport == "private" else 0.2),
#         carbon_emission * (0.3 if diet == "omnivore" else 0.2),
#         carbon_emission * 0.2,
#         carbon_emission * (0.1 if energy_efficiency == "No" else 0.05)
#     ]
#     labels = ["Transport", "Diet", "Waste", "Energy"]
#     colors = ["#4169E1", "#5F84EF", "#87A9FA", "#ADC6FD"]
#     ax2.pie(sizes, labels=labels, autopct='%1.1f%%', startangle=140, colors=colors)
#     ax2.set_title("Emission Breakdown", color='black')
#     ax2.axis("equal")
#     fig2.patch.set_facecolor("#FFFFFF")
# 
#     return feedback, impact, f"{carbon_emission:.2f}", suggestions, fig1, fig2
# 
# # Royal Blue & White CSS
# css_styles = """
#     .gradio-container {
#         background: black;
#         font-family: 'Segoe UI', sans-serif;
#         color: #1E1E1E;
#     }
#     h1, h2, h3, p {
#         color: #2743B2;
#         text-align: center;
#     }
#     .gradio-button {
#         background-color: #4169E1;
#         color: white;
#         font-size: 1.1em;
#         border-radius: 8px;
#         transition: 0.3s ease;
#         border: none;
#     }
#     .gradio-button:hover {
#         background-color: #2743B2;
#         color: white;
#     }
#     .gradio-dropdown, .gradio-slider, .gradio-radio, .gradio-textbox {
#         background-color: #FFFFFF;
#         color: #1E1E1E;
#         border: 1.5px solid #4169E1;
#         border-radius: 8px;
#         padding: 10px;
#     }
# """
# 
# 
# with gr.Blocks(css=css_styles) as demo:
#     gr.Markdown("""
#     <div style="padding: 30px;">
#   <h1 style="font-size: 3em; color: white;"> Carbon Estimator AI üíô</h1>
#     <p style="font-size: 1.3em; color: white;">Estimate  your carbon footprint.</p>
#     </div>
#     """)
# 
#     with gr.Row():
#         with gr.Column():
#             body_type = gr.Dropdown(["obese", "overweight", "underweight"], label="Body Type üåç")
#             sex = gr.Dropdown(["male", "female"], label="Sex ‚ößÔ∏è")
#             diet = gr.Dropdown(["omnivore", "vegetarian", "vegan", "pescatarian"], label="Diet ü•ó")
#             transport = gr.Dropdown(["public", "walk/bicycle", "private"], label="Transport Mode üöó")
#             vehicle_type = gr.Dropdown(["petrol", "electric", "hybrid"], label="Vehicle Type ‚ö°")
# 
#         with gr.Column():
#             air_travel = gr.Dropdown(["never", "rarely", "very frequently"], label="Air Travel ‚úàÔ∏è")
#             waste_bag_size = gr.Dropdown(["small", "medium", "large"], label="Waste Bag Size ‚ôªÔ∏è")
#             energy_efficiency = gr.Dropdown(["Yes", "Sometimes", "No"], label="Energy Efficiency üîã")
#             distance = gr.Slider(0, 10000, value=100, label="Vehicle Distance (km/month) üõ£Ô∏è")
#             recycling = gr.Radio(["Yes", "No", "Sometimes"], label="Recycle? ‚ôªÔ∏è")
# 
#     with gr.Row():
#         submit = gr.Button("Estimate Emission üå±")
# 
#     with gr.Row(visible=False) as feedback_row:
#         with gr.Column():
#             feedback = gr.Textbox(label="Feedback üåç", interactive=False)
#             impact = gr.Textbox(label="Impact Level üå±", interactive=False)
# 
#         with gr.Column():
#             carbon_output = gr.Textbox(label="Carbon Emission (kg) üî•", interactive=False)
#             suggestions = gr.Textbox(label="Suggestions üåø", interactive=False)
# 
#     with gr.Row(visible=False) as chart_row:
#         with gr.Column():
#             chart1 = gr.Plot(label="Daily Emission vs Global Avg üåç")
#         with gr.Column():
#             chart2 = gr.Plot(label="Footprint Breakdown üçÉ")
# 
#     def on_submit(*args):
#         feedback_text, impact_text, carbon_text, suggestion_text, fig1, fig2 = predict_emission(*args)
#         return (
#             gr.update(visible=True),
#             gr.update(visible=True),
#             feedback_text, impact_text, carbon_text, suggestion_text, fig1, fig2
#         )
# 
#     submit.click(
#         on_submit,
#         inputs=[body_type, sex, diet, transport, vehicle_type, air_travel,
#                 waste_bag_size, energy_efficiency, distance, recycling],
#         outputs=[feedback_row, chart_row, feedback, impact, carbon_output, suggestions, chart1, chart2]
#     )
# 
#     gr.Markdown("""
#     <div style="text-align:center; margin-top:30px; color: #2743B2; padding: 15px;">
#         <p>Built by Devalekka üåç</strong></p>
#     </div>
#     """)
# 
# if __name__ == "__main__":
#     demo.launch(share=True, debug=True)
#